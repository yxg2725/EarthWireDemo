package com.huadin.earthwire.Model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huadin.earthwire.Model.dao.bean.Project;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT".
*/
public class ProjectDao extends AbstractDao<Project, Long> {

    public static final String TABLENAME = "PROJECT";

    /**
     * Properties of entity Project.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WorkName = new Property(1, String.class, "workName", false, "WORK_NAME");
        public final static Property ProjectTeamName = new Property(2, String.class, "projectTeamName", false, "PROJECT_TEAM_NAME");
        public final static Property ProjectTeamHeadName = new Property(3, String.class, "projectTeamHeadName", false, "PROJECT_TEAM_HEAD_NAME");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property StartTimeMillis = new Property(5, long.class, "startTimeMillis", false, "START_TIME_MILLIS");
        public final static Property Worker = new Property(6, String.class, "worker", false, "WORKER");
        public final static Property CompleteState = new Property(7, String.class, "completeState", false, "COMPLETE_STATE");
    };


    public ProjectDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WORK_NAME\" TEXT," + // 1: workName
                "\"PROJECT_TEAM_NAME\" TEXT," + // 2: projectTeamName
                "\"PROJECT_TEAM_HEAD_NAME\" TEXT," + // 3: projectTeamHeadName
                "\"START_TIME\" TEXT," + // 4: startTime
                "\"START_TIME_MILLIS\" INTEGER NOT NULL ," + // 5: startTimeMillis
                "\"WORKER\" TEXT," + // 6: worker
                "\"COMPLETE_STATE\" TEXT);"); // 7: completeState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String workName = entity.getWorkName();
        if (workName != null) {
            stmt.bindString(2, workName);
        }
 
        String projectTeamName = entity.getProjectTeamName();
        if (projectTeamName != null) {
            stmt.bindString(3, projectTeamName);
        }
 
        String projectTeamHeadName = entity.getProjectTeamHeadName();
        if (projectTeamHeadName != null) {
            stmt.bindString(4, projectTeamHeadName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
        stmt.bindLong(6, entity.getStartTimeMillis());
 
        String worker = entity.getWorker();
        if (worker != null) {
            stmt.bindString(7, worker);
        }
 
        String completeState = entity.getCompleteState();
        if (completeState != null) {
            stmt.bindString(8, completeState);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String workName = entity.getWorkName();
        if (workName != null) {
            stmt.bindString(2, workName);
        }
 
        String projectTeamName = entity.getProjectTeamName();
        if (projectTeamName != null) {
            stmt.bindString(3, projectTeamName);
        }
 
        String projectTeamHeadName = entity.getProjectTeamHeadName();
        if (projectTeamHeadName != null) {
            stmt.bindString(4, projectTeamHeadName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
        stmt.bindLong(6, entity.getStartTimeMillis());
 
        String worker = entity.getWorker();
        if (worker != null) {
            stmt.bindString(7, worker);
        }
 
        String completeState = entity.getCompleteState();
        if (completeState != null) {
            stmt.bindString(8, completeState);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Project readEntity(Cursor cursor, int offset) {
        Project entity = new Project( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // workName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectTeamName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // projectTeamHeadName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTime
            cursor.getLong(offset + 5), // startTimeMillis
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // worker
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // completeState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Project entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWorkName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectTeamName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectTeamHeadName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartTimeMillis(cursor.getLong(offset + 5));
        entity.setWorker(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompleteState(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Project entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Project entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
