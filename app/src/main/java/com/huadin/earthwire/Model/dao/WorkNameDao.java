package com.huadin.earthwire.Model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huadin.earthwire.Model.dao.bean.WorkName;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORK_NAME".
*/
public class WorkNameDao extends AbstractDao<WorkName, Long> {

    public static final String TABLENAME = "WORK_NAME";

    /**
     * Properties of entity WorkName.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WorkName = new Property(1, String.class, "workName", false, "WORK_NAME");
        public final static Property StartTime = new Property(2, String.class, "startTime", false, "START_TIME");
        public final static Property PlanTime = new Property(3, String.class, "planTime", false, "PLAN_TIME");
        public final static Property EndTime = new Property(4, String.class, "endTime", false, "END_TIME");
        public final static Property CurrentState = new Property(5, String.class, "currentState", false, "CURRENT_STATE");
        public final static Property ProjectName = new Property(6, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ProjectHead = new Property(7, String.class, "projectHead", false, "PROJECT_HEAD");
        public final static Property ProjectHeadPhone = new Property(8, String.class, "projectHeadPhone", false, "PROJECT_HEAD_PHONE");
        public final static Property Worker = new Property(9, String.class, "worker", false, "WORKER");
    };


    public WorkNameDao(DaoConfig config) {
        super(config);
    }
    
    public WorkNameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORK_NAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WORK_NAME\" TEXT," + // 1: workName
                "\"START_TIME\" TEXT," + // 2: startTime
                "\"PLAN_TIME\" TEXT," + // 3: planTime
                "\"END_TIME\" TEXT," + // 4: endTime
                "\"CURRENT_STATE\" TEXT," + // 5: currentState
                "\"PROJECT_NAME\" TEXT," + // 6: projectName
                "\"PROJECT_HEAD\" TEXT," + // 7: projectHead
                "\"PROJECT_HEAD_PHONE\" TEXT," + // 8: projectHeadPhone
                "\"WORKER\" TEXT);"); // 9: worker
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORK_NAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkName entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String workName = entity.getWorkName();
        if (workName != null) {
            stmt.bindString(2, workName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String planTime = entity.getPlanTime();
        if (planTime != null) {
            stmt.bindString(4, planTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(5, endTime);
        }
 
        String currentState = entity.getCurrentState();
        if (currentState != null) {
            stmt.bindString(6, currentState);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(7, projectName);
        }
 
        String projectHead = entity.getProjectHead();
        if (projectHead != null) {
            stmt.bindString(8, projectHead);
        }
 
        String projectHeadPhone = entity.getProjectHeadPhone();
        if (projectHeadPhone != null) {
            stmt.bindString(9, projectHeadPhone);
        }
 
        String worker = entity.getWorker();
        if (worker != null) {
            stmt.bindString(10, worker);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkName entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String workName = entity.getWorkName();
        if (workName != null) {
            stmt.bindString(2, workName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String planTime = entity.getPlanTime();
        if (planTime != null) {
            stmt.bindString(4, planTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(5, endTime);
        }
 
        String currentState = entity.getCurrentState();
        if (currentState != null) {
            stmt.bindString(6, currentState);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(7, projectName);
        }
 
        String projectHead = entity.getProjectHead();
        if (projectHead != null) {
            stmt.bindString(8, projectHead);
        }
 
        String projectHeadPhone = entity.getProjectHeadPhone();
        if (projectHeadPhone != null) {
            stmt.bindString(9, projectHeadPhone);
        }
 
        String worker = entity.getWorker();
        if (worker != null) {
            stmt.bindString(10, worker);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WorkName readEntity(Cursor cursor, int offset) {
        WorkName entity = new WorkName( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // workName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // planTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // currentState
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // projectName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // projectHead
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // projectHeadPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // worker
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkName entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWorkName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlanTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrentState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProjectName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProjectHead(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProjectHeadPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWorker(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkName entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkName entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
